name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality & Testing
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
        registry-url: 'https://registry.npmjs.org/'
        
    - name: Configure npm for better reliability
      working-directory: ./Frontend
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retries 5
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-timeout 300000
        
    - name: Install dependencies with retry
      working-directory: ./Frontend
      run: |
        set -e
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          if npm ci --ignore-scripts --prefer-offline --no-audit; then
            echo "Dependencies installed successfully on attempt $attempt"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to install dependencies after $max_attempts attempts"
              exit 1
            fi
            echo "Attempt $attempt failed, waiting before retry..."
            sleep $(( attempt * 30 ))
            ((attempt++))
          fi
        done
      env:
        CI: true
        HUSKY: 0
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
    - name: Type checking
      working-directory: ./Frontend
      run: npm run type-check
      
    - name: Lint code
      working-directory: ./Frontend
      run: npm run lint
      
    - name: Check code formatting
      working-directory: ./Frontend
      run: npm run format:check
      
    - name: Run tests
      working-directory: ./Frontend
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./Frontend/coverage
        flags: frontend
        name: codecov-frontend
        
  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
        registry-url: 'https://registry.npmjs.org/'
        
    - name: Configure npm for security audit
      working-directory: ./Frontend
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retries 5
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-timeout 300000
        
    - name: Install dependencies with retry for security
      working-directory: ./Frontend
      run: |
        set -e
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Security audit attempt $attempt of $max_attempts"
          if npm ci --ignore-scripts --prefer-offline --no-audit; then
            echo "Dependencies installed successfully for security audit on attempt $attempt"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to install dependencies for security audit after $max_attempts attempts"
              exit 1
            fi
            echo "Security audit attempt $attempt failed, waiting before retry..."
            sleep $(( attempt * 30 ))
            ((attempt++))
          fi
        done
      env:
        CI: true
        HUSKY: 0
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
    - name: Run security audit
      working-directory: ./Frontend
      run: npm audit --audit-level moderate
      continue-on-error: true
      
  # Build & Deploy
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
        registry-url: 'https://registry.npmjs.org/'
        
    - name: Configure npm for build
      working-directory: ./Frontend
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retries 5
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-timeout 300000
        
    - name: Install dependencies with retry for build
      working-directory: ./Frontend
      run: |
        set -e
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Build attempt $attempt of $max_attempts"
          if npm ci --ignore-scripts --prefer-offline --no-audit; then
            echo "Dependencies installed successfully for build on attempt $attempt"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to install dependencies for build after $max_attempts attempts"
              exit 1
            fi
            echo "Build attempt $attempt failed, waiting before retry..."
            sleep $(( attempt * 30 ))
            ((attempt++))
          fi
        done
      env:
        CI: true
        HUSKY: 0
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
    - name: Build application
      working-directory: ./Frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: Frontend/dist/
        retention-days: 30
        
  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
        registry-url: 'https://registry.npmjs.org/'
        
    - name: Configure npm for performance testing
      working-directory: ./Frontend
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retries 5
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-timeout 300000
        
    - name: Install dependencies with retry for performance
      working-directory: ./Frontend
      run: |
        set -e
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Performance test attempt $attempt of $max_attempts"
          if npm ci --ignore-scripts --prefer-offline --no-audit; then
            echo "Dependencies installed successfully for performance testing on attempt $attempt"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to install dependencies for performance testing after $max_attempts attempts"
              exit 1
            fi
            echo "Performance test attempt $attempt failed, waiting before retry..."
            sleep $(( attempt * 30 ))
            ((attempt++))
          fi
        done
      env:
        CI: true
        HUSKY: 0
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: Frontend/dist/
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './Frontend/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://your-domain.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: Frontend/dist/
        
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        # Add your deployment commands here
        # Examples:
        # - Deploy to Vercel: vercel --prod
        # - Deploy to Netlify: netlify deploy --prod
        # - Deploy to AWS S3: aws s3 sync dist/ s3://your-bucket/
        # - Deploy to your server via SSH/SCP
        echo "âœ… Deployment completed!"
        
    - name: Create deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'ðŸš€ Production deployment completed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()